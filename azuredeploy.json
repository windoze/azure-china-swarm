{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "adminUsername": {
      "type": "string",
      "defaultValue": "azureuser",
      "metadata": {
        "description": "Administrator user name."
      }
    },
    "sshPublicKey": {
      "type": "securestring",
      "metadata": {
        "description": "SSH public key for the Virtual Machines."
      }
    },
    "masterCount": {
      "type": "int",
      "defaultValue": 3,
      "metadata": {
        "description": "Number of Swarm manager nodes in the cluster."
      }
    },
    "dbServerSku": {
        "type": "string",
        "defaultValue": "MS1",
        "allowedValues": [
            "MS1",
            "MS2",
            "MS3",
            "MS4"
        ],
        "metadata": {
            "description": "The server SKU. Memory, Storage, CpuQuota, and Connection capacity."
        }
    },
    "dbUserName": {
        "type": "string",
        "defaultValue": "wordpress",
        "metadata": {
            "description": "The name of the user used to access the MySql database. Limit 16 characters. (MySQL User Names and Passwords: http://dev.mysql.com/doc/refman/5.5/en/user-names.html)"
        }
    },
    "dbPassword": {
        "type": "securestring",
        "metadata": {
            "description": "The password of the user used to access the MySql database. Limit 64 characters. MySQL User Names and Passwords: http://dev.mysql.com/doc/refman/5.5/en/user-names.html"
        }
    }
  },
  "variables": {
    "singleQuote": "'",
    "vmNameMaster": "swarm-master-",
    "vmSizeMaster": "Standard_A2",
    "availabilitySetMasters": "swarm-masters-set",
    "osImagePublisher": "Canonical",
    "osImageOffer": "UbuntuServer",
    "osImageSKU": "16.04.0-LTS",
    "managementPublicIPAddrName": "swarm-lb-masters-ip",
    "virtualNetworkName": "swarm-vnet",
    "subnetNameMasters": "subnet-masters",
    "addressPrefixMasters": "10.0.0.0/16",
    "subnetPrefixMasters": "10.0.0.0/24",
    "subnetRefMaster": "[concat(resourceId('Microsoft.Network/virtualNetworks',variables('virtualNetworkName')),'/subnets/',variables('subnetNameMasters'))]",
    "mastersNsgName": "swarm-masters-firewall",
    "mastersNsgID": "[resourceId('Microsoft.Network/networkSecurityGroups',variables('mastersNsgName'))]",
    "newStorageAccountName": "[uniqueString(resourceGroup().id, deployment().name)]",
    "clusterFqdn": "[concat('swarm-',uniqueString(resourceGroup().id, deployment().name))]",
    "storageAccountType": "Standard_LRS",
    "vhdBlobContainer": "vhds",
    "mastersLbName": "swarm-lb-masters",
    "mastersLbID": "[resourceId('Microsoft.Network/loadBalancers',variables('mastersLbName'))]",
    "mastersLbIPConfigName": "MastersLBFrontEnd",
    "mastersLbIPConfigID": "[concat(variables('mastersLbID'),'/frontendIPConfigurations/', variables('mastersLbIPConfigName'))]",
    "mastersLbBackendPoolName": "swarm-masters-pool",
    "mastersLbBackendPoolID": "[concat(variables('mastersLbID'),'/backendAddressPools/', variables('mastersLbBackendPoolName'))]",
    "mastersLbProbesName": "swarm-masters-probe",
    "mastersLbProbesID": "[concat(variables('mastersLbID'),'/probes/', variables('mastersLbProbesName'))]",
    "mastersLbRulesName": "swarm-lb-rules",
    "sshKeyPath": "[concat('/home/', parameters('adminUsername'), '/.ssh/authorized_keys')]",
    "dbServerName": "[concat('wp', uniqueString(resourceGroup().id, deployment().name))]",
    "dbServerVersion": "5.5",
    "databaseName": "wordpress"
  },
  "resources": [
    {
        "type": "Microsoft.MySql/servers",
        "name": "[variables('dbServerName')]",
        "apiVersion": "2015-09-01",
        "location": "[resourceGroup().location]",
        "tags": {
            "displayName": "[variables('dbServerName')]"
        },
        "sku": { "name": "[parameters('dbServerSku')]" },
        "properties": {
            "location": "[resourceGroup().location]",
            "version": "[variables('dbServerVersion')]"
        },
        "resources": [
            {
                "name": "AllowAllIpAddresses",
                "type": "firewallRules",
                "apiVersion": "2015-09-01",
                "dependsOn": [
                    "[concat('Microsoft.MySql/servers/', variables('dbServerName'))]"
                ],
                "properties": {
                    "startIpAddress": "0.0.0.0",
                    "endIpAddress": "255.255.255.255"
                }
            },
            {
                "name": "[parameters('dbUserName')]",
                "type": "users",
                "apiVersion": "2015-09-01",
                "dependsOn": [
                    "[concat('Microsoft.MySql/servers/', variables('dbServerName'))]"
                ],
                "properties": {
                    "password": "[parameters('dbPassword')]"
                }
            },
            {
                "name": "[variables('databaseName')]",
                "type": "databases",
                "tags": {
                    "displayName": "[variables('databaseName')]"
                },
                "apiVersion": "2015-09-01",
                "dependsOn": [
                    "[concat('Microsoft.MySql/servers/', variables('dbServerName'))]"
                ],
                "properties": { },
                "resources": [
                    {
                        "name": "[parameters('dbUserName')]",
                        "type": "privileges",
                        "apiVersion": "2015-09-01",
                        "dependsOn": [
                            "[concat('Microsoft.MySql/servers/', variables('dbServerName'), '/users/', parameters('dbUserName'))]",
                            "[concat('Microsoft.MySql/servers/', variables('dbServerName'), '/databases/', variables('databaseName'))]"
                        ],
                        "properties": {
                            "level": "ReadWrite"
                        }
                    }
                ]
            }
        ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('newStorageAccountName')]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[variables('storageAccountType')]"
      }
    },
    {
      "type": "Microsoft.Compute/availabilitySets",
      "name": "[variables('availabilitySetMasters')]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "properties": {}
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('managementPublicIPAddrName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[concat(variables('clusterFqdn'), '-manage')]"
        }
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[variables('mastersNsgID')]"
      ],
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefixMasters')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetNameMasters')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefixMasters')]",
              "networkSecurityGroup": {
                "id": "[variables('mastersNsgID')]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/networkSecurityGroups",
      "name": "[variables('mastersNsgName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "securityRules": [
          {
            "name": "ssh",
            "properties": {
              "description": "",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "22",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 1000,
              "direction": "Inbound"
            }
          },
          {
            "name": "web-backend",
            "properties": {
              "description": "",
              "protocol": "Tcp",
              "sourcePortRange": "*",
              "destinationPortRange": "8080",
              "sourceAddressPrefix": "*",
              "destinationAddressPrefix": "*",
              "access": "Allow",
              "priority": 1100,
              "direction": "Inbound"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[concat(variables('vmNameMaster'), copyIndex(), '-nic')]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "nicLoopMaster",
        "count": "[parameters('masterCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('mastersLbName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('mastersLbName'), '/inboundNatRules/',  'SSH-', variables('vmNameMaster'), copyIndex())]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipConfigMaster",
            "properties": {
              "privateIPAllocationMethod": "Static",
              "privateIPAddress": "[concat('10.0.0.', copyIndex(4))]",
              "subnet": {
                "id": "[variables('subnetRefMaster')]"
              },
              "loadBalancerBackendAddressPools": [
                {
                  "id": "[concat(variables('mastersLbID'), '/backendAddressPools/', variables('mastersLbBackendPoolName'))]"
                }
              ],
              "loadBalancerInboundNatRules": [
                {
                  "id": "[concat(variables('mastersLbID'),'/inboundNatRules/SSH-',variables('vmNameMaster'),copyindex())]"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "name": "[variables('mastersLbName')]",
      "type": "Microsoft.Network/loadBalancers",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('managementPublicIPAddrName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('mastersLbIPConfigName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses',variables('managementPublicIPAddrName'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('mastersLbBackendPoolName')]"
          }
        ],
        "loadBalancingRules": [
            {
                "name": "[variables('mastersLbRulesName')]",
                "properties": {
                    "frontendIPConfiguration": {
                      "id": "[variables('mastersLbIPConfigID')]"
                    },
                    "frontendPort": 80,
                    "backendPort": 8080,
                    "enableFloatingIP": false,
                    "idleTimeoutInMinutes": 4,
                    "protocol": "Tcp",
                    "loadDistribution": "SourceIP",
                    "backendAddressPool": {
                      "id": "[variables('mastersLbBackendPoolID')]"
                    },
                    "probe": {
                      "id": "[variables('mastersLbProbesID')]"
                    }
                }
            }
        ],
        "probes": [
            {
                "name": "[variables('mastersLbProbesName')]",
                "properties": {
                    "protocol": "Tcp",
                    "port": 8080,
                    "intervalInSeconds": 5,
                    "numberOfProbes": 2
                }
            }
        ]
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Network/loadBalancers/inboundNatRules",
      "name": "[concat(variables('mastersLbName'), '/', 'SSH-', variables('vmNameMaster'), copyIndex())]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "lbNatLoopMaster",
        "count": "[parameters('masterCount')]"
      },
      "dependsOn": [
        "[concat('Microsoft.Network/loadBalancers/', variables('mastersLbName'))]"
      ],
      "properties": {
        "frontendIPConfiguration": {
          "id": "[variables('mastersLbIPConfigID')]"
        },
        "protocol": "tcp",
        "frontendPort": "[copyIndex(2200)]",
        "backendPort": 22,
        "enableFloatingIP": false
      }
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('vmNameMaster'), '0')]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('newStorageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('vmNameMaster'), '0', '-nic')]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetMasters'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('availabilitySetMasters'))]"
        },
        "hardwareProfile": {
          "vmSize": "[variables('vmSizeMaster')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('vmNameMaster'), '0')]",
          "adminUsername": "[parameters('adminUsername')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "true",
            "ssh": {
              "publicKeys": [
                {
                  "path": "[variables('sshKeyPath')]",
                  "keyData": "[parameters('sshPublicKey')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('osImagePublisher')]",
            "offer": "[variables('osImageOffer')]",
            "sku": "[variables('osImageSKU')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(variables('vmNameMaster'), '0','-osdisk')]",
            "vhd": {
              "uri": "[concat('http://', variables('newStorageAccountName'), '.blob.core.chinacloudapi.cn/', variables('vhdBlobContainer'), '/master-', '0', '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('vmNameMaster'), '0', '-nic'))]"
            }
          ]
        }
      },
      "resources": [
        {
          "apiVersion": "2015-06-15",
          "type": "Microsoft.Compute/virtualMachines/extensions",
          "name": "[concat(variables('vmNameMaster'), '0', '/config-swarm-master')]",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[concat('Microsoft.Compute/virtualMachines/', variables('vmNameMaster'), '0')]"
          ],
          "properties": {
            "publisher": "Microsoft.OSTCExtensions",
            "type": "CustomScriptForLinux",
            "typeHandlerVersion": "1.4",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": ["http://mmp-docker-showcase-hub.chinaeast.cloudapp.chinacloudapi.cn/swarm-manager-0.sh"],
              "commandToExecute": "[concat('sh swarm-manager-0.sh ', parameters('adminUsername'))]"
            }
          }
        }
      ]
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[concat(variables('vmNameMaster'), copyIndex(1))]",
      "location": "[resourceGroup().location]",
      "copy": {
        "name": "vmLoopMaster",
        "count": "[sub(parameters('masterCount'),1)]"
      },
      "dependsOn": [
        "[concat('Microsoft.Storage/storageAccounts/', variables('newStorageAccountName'))]",
        "[concat('Microsoft.Network/networkInterfaces/', variables('vmNameMaster'), copyIndex(1), '-nic')]",
        "[concat('Microsoft.Compute/availabilitySets/', variables('availabilitySetMasters'))]"
      ],
      "properties": {
        "availabilitySet": {
          "id": "[resourceId('Microsoft.Compute/availabilitySets',variables('availabilitySetMasters'))]"
        },
        "hardwareProfile": {
          "vmSize": "[variables('vmSizeMaster')]"
        },
        "osProfile": {
          "computerName": "[concat(variables('vmNameMaster'), copyIndex(1))]",
          "adminUsername": "[parameters('adminUsername')]",
          "linuxConfiguration": {
            "disablePasswordAuthentication": "true",
            "ssh": {
              "publicKeys": [
                {
                  "path": "[variables('sshKeyPath')]",
                  "keyData": "[parameters('sshPublicKey')]"
                }
              ]
            }
          }
        },
        "storageProfile": {
          "imageReference": {
            "publisher": "[variables('osImagePublisher')]",
            "offer": "[variables('osImageOffer')]",
            "sku": "[variables('osImageSKU')]",
            "version": "latest"
          },
          "osDisk": {
            "name": "[concat(variables('vmNameMaster'), copyIndex(1),'-osdisk')]",
            "vhd": {
              "uri": "[concat('http://', variables('newStorageAccountName'), '.blob.core.chinacloudapi.cn/', variables('vhdBlobContainer'), '/master-', copyIndex(1), '-osdisk.vhd')]"
            },
            "caching": "ReadWrite",
            "createOption": "FromImage"
          }
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces',concat(variables('vmNameMaster'), copyIndex(1), '-nic'))]"
            }
          ]
        }
      },
      "resources": [
        {
          "apiVersion": "2015-06-15",
          "type": "Microsoft.Compute/virtualMachines/extensions",
          "name": "[concat(variables('vmNameMaster'), copyIndex(1), '/config-swarm-master')]",
          "location": "[resourceGroup().location]",
          "dependsOn": [
            "[resourceId('Microsoft.Compute/virtualMachines/extensions', concat(variables('vmNameMaster'), '0'), 'config-swarm-master')]",
            "[concat('Microsoft.Compute/virtualMachines/', variables('vmNameMaster'), copyIndex(1))]"
          ],
          "properties": {
            "publisher": "Microsoft.OSTCExtensions",
            "type": "CustomScriptForLinux",
            "typeHandlerVersion": "1.4",
            "autoUpgradeMinorVersion": true,
            "settings": {
              "fileUris": ["http://mmp-docker-showcase-hub.chinaeast.cloudapp.chinacloudapi.cn/swarm-manager.sh"],
              "commandToExecute": "[concat('sh swarm-manager.sh ', parameters('adminUsername'))]"
            }
          }
        }
      ]
    }
  ],
  "outputs": {
    "sshTunnelCmd": {
      "type": "string",
      "value": "[concat('ssh -L 2375:swarm-master-0:2375 -N ', parameters('adminUsername'), '@', reference(variables('managementPublicIPAddrName')).dnsSettings.fqdn, ' -p 2200')]"
    },
    "dockerCmd": {
      "type": "string",
      "value": "docker -H tcp://localhost:2375 info"
    },
    "sshMaster0": {
      "type": "string",
      "value": "[concat('ssh ', parameters('adminUsername'), '@', reference(variables('managementPublicIPAddrName')).dnsSettings.fqdn, ' -A -p 2200')]"
    },
    "sshMaster1": {
      "type": "string",
      "value": "[concat('ssh ', parameters('adminUsername'), '@', reference(variables('managementPublicIPAddrName')).dnsSettings.fqdn, ' -A -p 2201')]"
    },
    "sshMaster2": {
      "type": "string",
      "value": "[concat('ssh ', parameters('adminUsername'), '@', reference(variables('managementPublicIPAddrName')).dnsSettings.fqdn, ' -A -p 2202')]"
    },
    "dbHost": {
      "type": "string",
      "value": "[concat(variables('dbServerName'), '.mysqldb.chinacloudapi.cn')]"
    },
    "dbUserName": {
      "type": "string",
      "value": "[concat(parameters('dbUserName'), '@', variables('dbServerName'))]"
    },
    "installWordpress": {
      "type": "string",
      "value": "[concat('ssh ', parameters('adminUsername'), '@', reference(variables('managementPublicIPAddrName')).dnsSettings.fqdn, ' -A -p 2200 ', 'docker service create --name wordpress -e WORDPRESS_DB_HOST=', variables('dbServerName'), '.mysqldb.chinacloudapi.cn', ' -e WORDPRESS_DB_USER=', variables('singleQuote'), variables('dbServerName'), '%', parameters('dbUserName'), variables('singleQuote'), ' -e WORDPRESS_DB_PASSWORD=', variables('singleQuote'), parameters('dbPassword'), variables('singleQuote'), ' -e WORDPRESS_DB_NAME=', variables('databaseName'), ' --replicas ', parameters('masterCount'), ' -p 8080:80 wordpress')]"
    },
    "wordpressUrl": {
      "type": "string",
      "value": "[concat('http://', reference(variables('managementPublicIPAddrName')).dnsSettings.fqdn)]"
    }
  }
}
